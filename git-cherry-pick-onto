#!/bin/bash

COMMITS=()
BRANCH=
FORCE_BRANCH=0
EXEC_AFTER=
ONTO=FETCH_HEAD

while [[ $# -gt 0 ]]; do
  case $1 in
    -b|--branch)
      BRANCH="$2"
      shift
      shift
      ;;
    -B)
      BRANCH="$2"
      FORCE_BRANCH=1
      shift
      shift
      ;;
    -o|--onto)
      ONTO="$2"
      shift
      shift
      ;;
    --exec-after)
      EXEC_AFTER="$2"
      shift
      shift
      ;;
    -*|--*)
      >&2 echo "unknown option $1"
      exit 1
      ;;
    *)
      COMMITS+=("$1")
      shift
      ;;
  esac
done

if [[ -z "${BRANCH}" ]]; then
  >&2 echo "--branch is required"
  exit 1
fi

function log_cmd() {
  [[ -t 2 ]] && >&2 printf '\033[1m'
  >&2 printf '$ '
  >&2 printf '%q ' "$@"
  [[ -t 2 ]] && >&2 printf '\033[0m'
  >&2 printf '\n'
  "$@"
}

worktree="$(log_cmd mktemp -d)"
if [[ "${FORCE_BRANCH}" -eq 1 ]]; then
  branch_flag="-B"
else
  branch_flag="-b"
fi

log_cmd git worktree add "${branch_flag}" "${BRANCH}" --no-checkout "${worktree}" "${ONTO}"
log_cmd pushd "${worktree}"

log_cmd git sparse-checkout init --no-cone
log_cmd git checkout

if [[ "${#COMMITS[@]}" -eq 0 ]]; then
  if [ -t 0 ]; then
    >&2 echo "reading commits from stdin"
  fi

  while IFS= read -r commit; do
    log_cmd git cherry-pick "${commit}"
  done
else
  log_cmd git cherry-pick "${COMMITS[@]}"
fi

if [[ -n "${EXEC_AFTER}" ]]; then
  log_cmd sh -c "${EXEC_AFTER}"
fi

log_cmd popd
log_cmd git worktree remove "${worktree}"
